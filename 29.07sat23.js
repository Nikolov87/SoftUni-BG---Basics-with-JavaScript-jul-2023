// https://judge.softuni.org/Contests/Compete/Index/2407#0
// https://softuni.bg/trainings/resources/officedocument/84792/while-%D1%86%D0%B8%D0%BA%D1%8A%D0%BB-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D1%8F-programming-basics-with-javascript-july-2023/4161
// https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fsoftuni%2Ebg%3A443%2Fdownloads%2Fsvn%2Fprogramming%2Dbasics%2D2022%2Ftrunk%2FJS%2F05%2EPB%2DJS%2DWhile%2DLoop%2F05%2E2%2520PB%2DJS%2DWhile%2DLoop%2DLab%2Edocx%3FaccessKey%3D45004A00650036004F0058003700760035004F004F0042006500650047003600770048002B003300320032005A002F0076006E007000390032006F00340069007A0030004C00320054004C0035003400590059006D006F00380073002B0039006400530062003900380069007800560031004300590031005900300033003000&wdAccPdf=0&wdEmbedFS=1
// https://softuni.bg/trainings/resources/video/87000/video-29-july-2023-todor-stoyanov-programming-basics-with-javascript-july-2023/4161

// for (let i = 1; i <= 3; ) {
//   console.log(i);
// } // The output is 11111111111 infinite loop

// TODO while loop
/*
function solve() {
  //   for (let i = 1; i <= 10; i++) {
  //     console.log(i);
  //   }

  let i = 1;
  while (i <= 10) {
    console.log(i);
    i++;
  }
  console.log("Finish");
}
solve();
*/

/*
function solve() {
  let a = 5;
  while (true) {
    if (a > 10) {
      break;
    }
    console.log("a = " + a);
    a++;
  }
}
solve();
// a = 5; a = 6; a = 7; a = 8; a = 9; a = 10;
*/

// üö® 1. –ß–µ—Ç–µ–Ω–µ –Ω–∞ –¥—É–º–∏
// –ù–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —á–µ—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –º–∞—Å–∏–≤, –¥–æ–∫–∞—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ "Stop".

// üö® 01. Read Text
/*
function readText(input) {
  let index = 0;
  let command = input[index]; //input[0]
  index++; //1
  while (command !== "Stop") {
    console.log(command);
    command = input[index]; // input[1] // input[2] // input[3]
    index++; // 2 // 3 // 4
  }
}

readText([
  "Nakov",
  "SoftUni",
  "Sofia",
  "Bulgaria",
  "SomeText",
  "Stop",
  "AfterStop",
  "Europe",
  "HelloWorld",
]);
*/

// üö® 02. Password
/*
function thePassword(input) {
  let index = 0;

  let userName = input[index];
  index++;

  let password = input[index];
  index++;

  let tempPassword = input[index];
  index++;

  while (tempPassword !== password) {
    tempPassword = input[index];
    index++;
  }
  console.log(`Welcome ${userName}!`);
}

thePassword(["Nakov", "1234", "Pass", "1324", "1234"]);
*/

// üö® 03. Sum Numbers
/*
function sumNumbers(input) {
  let index = 0;
  let findingNumber = Number(input[index]);
  index++;

  let sum = 0;

  while (sum < findingNumber) {
    let currentNumber = Number(input[index]);
    index++;

    sum += currentNumber;
  }
  console.log(sum);
}

sumNumbers(["20", "1", "2", "3", "4", "5", "6"]);
*/
// üö® 04. Sequence 2k+1
/*
function sequence2kPlus1(input) {
  let n = Number(input[0]);
  let k = 1;

  while (k <= n) {
    console.log(k);
    k = k * 2 + 1;
  }
}
sequence2kPlus1(["31"]);
*/

// üö® 05. Account Balance
/*
function accountBalance(input) {
  let index = 0;
  let account = 0;

  let command = input[index];
  index++;

  while (command !== "NoMoreMoney") {
    let money = Number(command);

    if (money < 0) {
      console.log("Invalid operation!");
      break;
    }

    account += money;
    console.log("Increase: " + money.toFixed(2));

    command = input[index];
    index++;
  }
  console.log("Total: " + account.toFixed(2));
}
accountBalance(["5.51", "69.42", "100", "NoMoreMoney"]);
accountBalance(["120", "45.55", "-150"]);
*/

// üö® 06. Max Number
/*
function maxNumber(input) {
  let index = 0;
  let myMaxNumber = Number(input[0]);

  let command = input[index];
  index++;

  while (command !== "Stop") {
    let num = Number(command);

    if (myMaxNumber < num) {
      myMaxNumber = num;
    }

    command = input[index];
    index++;
  }
  console.log(myMaxNumber);
}

maxNumber(["99", "80", "70", "100", "Stop"]);
*/

// üö® 07. Min Number

function minNumber(input) {
  let index = 0;
  let myMinNumber = Number(input[0]);

  let command = input[index];

  while (command !== "Stop") {
    let num = Number(command);

    if (myMinNumber > num) {
      myMinNumber = num;
    }

    index++;
    command = input[index];
  }
  console.log(myMinNumber);
}

minNumber(["100", "99", "80", "70", "Stop"]);
minNumber(["-10", "20", "-30", "Stop"]);
minNumber(["45", "-20", "7", "99", "Stop"]);
minNumber(["999", "Stop"]);
minNumber(["-1", "-2", "Stop"]);

/*
// üö® 08. Graduation

function graduation(input) {
  let index = 0; // index –∑–∞—â–æ—Ç–æ –Ω–µ —Å–µ –∑–Ω–∞–µ –∫–æ–ø–ª–∫–æ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏ –∏–º–∞
  let name = input[index]; // –∏–º–µ—Ç–æ –Ω–∞ —É—á–µ–Ω–∏–∫–∞
  index++; // –∏ —É–≤–µ–ª–∏—á–∞–≤–∞–º–µ index —Å –µ–¥–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞

  let sumGrade = 0; // –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –∫–æ—è—Ç–æ —Å—ä–±–∏—Ä–∞ –≤—Å–∏—á–∫–∏ —É—Ü–µ–Ω–∫–∏ –Ω–∞ —É—á–µ–Ω–∏–∫–∞
  let i = 1; // –ø—Ä–æ–º–µ–Ω–∏–≤–∞ –∫–æ—è—Ç–æ –±—Ä–æ–∏ –∫–ª–∞—Å–æ–≤–µ—Ç–µ –Ω–∞ —É—á–µ–Ω–∏–∫–∞, –∑–∞—Ç–æ–≤–∞ –∑–∞–ø–æ—á–≤–∞ –æ—Ç 1 –Ω–µ –æ—Ç 0

  let badGradeCount = 0; // –±—Ä–æ—è—á –Ω–∞ –ª–æ—à–∏—Ç–µ —É—Ü–µ–Ω–∫–∏ –Ω–∞ —É—á–µ–Ω–∏–∫–∞
  let hasExcluded = false; // –∏ —Ñ–ª–∞–≥ –±—É–ª—å–æ–Ω –∫–æ–∏—Ç–æ –∫–∞–∑–≤–∞ —É—á–µ–Ω–∏–∫—ä—Ç –¥–∞–ª–∏ –µ –±–∏–ª —Å–∫—ä—Å–∞–Ω –∏–ª–∏ –Ω–µ –µ —Å–∫—ä—Å–∞–Ω

  while (i <= 12) {
    //(i <= 12) –¥–æ–∫–∞—Ç–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ –¥–æ 12 –∫–ª–∞—Å, –ø–æ–≤—Ç–∞—Ä—è–π
    let grade = Number(input[index]); // –∫–∞—Ç–æ –∑–∞ –≤—Å—è–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–≤–∞—à –ø–æ –µ–¥–Ω–∞ —É—Ü–µ–Ω–∫–∞
    index++;

    if (grade < 4.0) {
      // –∞–∫–æ —Ç–∞–∑–∏ —É—Ü–µ–Ω–∫–∞ –µ –ø–æ –º–∞–ª–∫–æ –æ—Ç 4
      badGradeCount++; // –∞–∫–æ (grade < 4.0) —É–≤–µ–ª—á–∞–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è—á–∞ –Ω–∞ –ª–æ—à–∏—Ç–µ —É—Ü–µ–Ω–∫–∏
      if (badGradeCount === 2) {
        // –∞–∫–æ –ª–æ—à–∏—Ç–µ —É—Ü–µ–Ω–∫–∏ –Ω–∞ —É—á–µ–Ω–∏–∫–∞ —Å–∞ 2, —Ç–æ —Ç–æ–≥–∞–≤–∞ üëá –±–∏–≤–∞ –∏–∑–∫–ª—é—á–µ–Ω
        console.log(`${name} has been excluded at ${i} grade`);
        hasExcluded = true; // –±—É–ª—å–æ–Ω —Ñ–ª–∞–≥–∞ —á–µ —É—á–µ–Ω–∏–∫—ä—Ç –µ –∏–∑–∫–ª—é—á–µ–Ω
        break; // –∏ —Ü—É–∫—ä–ª—ä—Ç –ø—Ä–∏–∫–ª—é—á–≤–∞
      }
      continue; // –∞–∫–æ —É—á–µ–Ω—É–∫—ä—Ç –∏–º–∞ —Å–∞–º–æ 1 –ª–æ—à–∞ –æ—Ü–µ–Ω–∫–∞ —Ç–æ–π –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞
    }

    sumGrade += grade; // –∫—ä–º —Å—É–º–∞—Ç–∞ –æ—Ç –æ—Ü–µ–Ω–∫–∏—Ç–µ –¥–æ–±–∞–≤—è–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∞
    i++; // –∏ —É–≤–µ–ª–∏—á–∞–≤–∞–º–µ i —Å –µ–¥–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏ —É—á–µ–Ω–∏–∫–∞ –ø—Ä–µ–º–∏–Ω–∞–≤–∞ –≤ —Å–ª–µ–¥–≤–∞—â –∫–ª–∞—Å
  } // –¥–æ–∫–∞—Ç–æ —É—á–µ–Ω–∏–∫—ä—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ –¥–æ 12 –∫–ª–∞—Å –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏ 2 –ª–æ—à–∏ –æ—Ü–µ–Ω–∫–∏

  if (!hasExcluded) {
    //  (!hasExcluded) = –Ω–∞ –ê–ö–û –£–ß–ï–ù–ò–ö–™–¢ –ù–ï –ï –°–ö–™–°–™–ù ! –ï –û–¢–†–ò–¶–ê–ù–ò–ï–¢–û –ù–ê hasExcluded
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–æ —É—á–µ–Ω–∏–∫—ä—Ç –µ —Å–∫—ä—Å–∞–Ω
    let avg = sumGrade / 12;
    console.log(`${name} graduated. Average grade: ${avg.toFixed(2)}`);
  }
}

graduation([
  "Gosho",
  "5",
  "5.5",
  "6",
  "5.43",
  "5.5",
  "6",
  "5.55",
  "5",
  "6",
  "6",
  "5.43",
  "5",
]);
graduation(["Mimi", "5", "6", "5", "6", "5", "6", "6", "2", "3"]);
*/
